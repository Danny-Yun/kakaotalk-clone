/*
    HTML과 마찬가지로, CCS도 모든 속성을 기억할 필요는 없다. 속성을 어떻게 작성하는지 알고,
    어떤 속성들이 있는지만 대략 안다면 구글링해서 사용하면 된다. 
*/

/* CSS를 HTML페이지에 적용하는 방법 */
/*
    1. 같은 HTML파일에 HTML코드와 CSS코드를 놓는다. (style태그)
    2. CSS와 HTML을 분리시킨다. (대부분의 사람들이 추천하고 전문적인 방법)
*/
body {
    background-color:beige;
}
/* CSS는 위에서부터 아래로 읽히고, 만약 똑같은 태그와 속성을 지목한다면 결국 적용되는건 가장 마지막 코드이다. */


/* 
    selector - id는 한 페이지에 유일하게 하나씩만 쓰는게 관례지만, class는 한 페이지에 같은 역할을 하는 
    모든 태그에 여러 번 중복해서 써도 된다. 
*/ 


/* box개념 */
div {
    height: 150px;
    width: 150px;
    background-color: tomato;
}    

/* box의 3가지 속성 - margin, padding, border */
/*
    margin은 box의 경계(border)의 바깥에 있는 공간을 의미한다. 
    
    margin : 값; -> 4방향 모두 적용
    margin : 값1, 값2; -> 위아래는 값1, 좌우 값2
    margin : 값1, 값2, 값3; -> 위 값1, 좌우 값2, 아래 값3
    margin : 값1, 값2, 값3, 값4; -> 시계방향으로 값1 ~ 값4 각각
    margin-top : 값; -> 위쪽에 값 적용
    margin-right : 값; -> 오른쪽에 값 적용
    margin-bottom : 값; -> 아래쪽에 값 적용
    margin-left : 값; -> 왼쪽에 값 적용

    * 인라인 요소는 padding과 margin이 좌우로 밖에 안되기 때문에 
        display: block; 을 통해 블록요소로 바꿔주면 상하로도 적용이 된다, 
*/ 
#margin {
    margin-top: 50px;
    margin-left: 70px;
    margin-bottom: 30px;
}
/*
    padding은 box의 경계(border)의 안쪽에 있는 공간을 의미한다.
    적용 방법은 margin과 동일하다.
*/
#padding {
    padding-top: 80px;
    padding-left: 70px;
    padding-right: 20px;
    padding-bottom: 10px;
}
/*
    border는 box의 경계다.

    border-color : 색상; -> 테두리 색상
    border-width : 너비; -> 경계선 너비(px)
    border-style : 값; -> 선의 종류(solid, dashed, dotted, double, none, groove, ridge, inset, outset)

    border : 너비 선종류 색상; -> 4방향 테두리선 긋기
    border-top : 너비 선종류 색상; -> 위쪽만 테두리선 긋기
    border-right : 너비 선종류 색상; -> 우측만 테두리선 긋기
    border-bottom : 너비 선종류 색상; -> 아래만 테두리선 긋기
    border-left : 너비 선종류 색상; -> 좌측만 테두리선 긋기
    
    bordeer-radius : 너비; -> 둥근 테두리
*/
#border {
    border: 5px solid black;
    margin-top: 20px;
    padding-top: 1px;
    padding-left: 10px;
    margin-bottom: 30px;
}
/* 
    인라인 태그는 padding은 모두 적용되지만, margin은 좌우로만 적용된다.  
    그래서 위아래도 margin을 적용하고 싶다면 inline요소들을 block으로 바꿔줘야 한다. 
*/
span {
    background-color: aqua;
    padding: 20px;
    margin: 50px;
}


/* flex box */
/*
    inline-block의 문제점이 발견되자 박스의 위치를 쉽게 바꾸기 위해 만들어낸 방법이다.
    flex box는 박스들을 어떤 곳이든 둘 수 있고, 이름처럼 매우 유연하다. 총 3가지 규칙이 있다.

    첫번째, 자식 엘리먼트에는 어떤 것도 적지 않아야 한다. 부모 엘리먼트에만 명시하면 됨
*/
aside {
    display: flex;
    /*
        - 주축(main-axis), 가로축 정렬, 수평
        justify-content: center; - 중앙 배치
        justify-content: flex-start; - 왼쪽 끝을 기준으로 배치
        justify-content: flex-end; - 오른쪽 끝을 기준으로 배치
        justify-content: space-evenly; - 빈 공간을 같은 크기로 나누어서 고르게 배치 

        - 교차축(cross-axis), 세로축 정렬, 수직
        align-items: center;
        align-items: flex-start; - 맨 위를 기준으로 배치
        align-items: flex-end; - 맨 아래를 기준으로 배치

        flex-direction: column; - 주축을 수직으로
        flex-direction: row; - 교차축을 수평으로

        flex-wrap: nowrap; - 디폴트값, 창의 크기를 줄여도 고정
        * flex-wrap: wrap; - 창의 크기에 맞춰서 보여줌

    */
    justify-content: center;
    align-items: center;
    flex-direction: row;
    flex-wrap: wrap;
}
.flex {
    background-color: lime;
    margin: 30px;
    /* 자식 엘리먼트들도 flex컨테이너가 될 수 있다. */   
    display: flex;
    justify-content: center;
    align-items: center;
}


/*
    position 개념은 레이아웃보단 위치를 아주 조금 위로, 조금 오른쪽으로 옮기고 싶을 때 사용한다. 
    그리고 블록을 박스의 위치를 기준으로 배치하는 기술이고 주로 컨텐츠를 겹치게 배열하거나 
    덮어씌우는 등의 상황에 유용하게 쓰인다. 

    position:static - 요소를 겹칠 수 없는 상태(디폴트 값)
    position:relative - absolute속성의 축이 되는 요소, 처음 위치한 곳을 기준으로 수정
    position:absolute - relative의 자식에 걸면 relative요소의 위치를 영점으로 삼음
    position:fixed -  초기 위치에 고정시킴, 스크롤 내려도 그대로 있다.
*/


/* 
    nth-child 선택자 

    태그명:nth-child(숫자) - 해당 숫자의 순서인 태그 지정
    태그명:nth-child(even) - 짝수인 순서의 태그 지정
    태그명:nth-child(odd) - 홀수인 순서의 태그 지정
    
    이외에 nth-child(5n), nth-child(2n + 1), nth-child(4n + 3) ... 도 가능하다.
*/
span:nth-child(3n + 1) {
    background-color: darkslategray;
    color:ghostwhite
}

/* 
    속성 선택자도 가능하다. 
    ex) input[placeholder="username"] {}
*/


/* state 개념 */
/*
    CSS로도 요소에 여러 효과를 줄 수 있다.  
    태그:active {} -> 클릭할 때마다 효과 발생
    태그:hover {} -> 마우스 커서를 대상 위에 올려놓을 때 효과 발생
    태그:focus {} -> 키보드로 선택되었을 때 효과 발생(Tab키)
    태그:focus-within {} -> 부모에게 부여해서 더 많은 자식 요소에 focus 적용시킬때 주로 사용
    a태그:visited {} -> 링크를 방문한 적이 있을 때 효과 발생
*/
button:hover {
    background-color: deeppink;
}
input:focus {
    background-color: deeppink;
}
a:visited {
    color:coral;
}


/* selection을 활용하여 드래그시 효과를 줄 수도 있다. */
p::selection {
    background-color: lime;
    color:brown;
}
p::first-letter {  /* 첫글자만 적용 */
    font-size: 40px;
}

